Lista de Exerc√≠cios: Operadores em Python

N√≠vel 1: Operadores Aritm√©ticos
1.	Soma b√°sica: Pe√ßa dois n√∫meros ao usu√°rio e imprima a soma.
2.	Subtra√ß√£o e negativos: Calcule a diferen√ßa entre dois n√∫meros e mostre se o resultado √© negativo.
3.	Multiplica√ß√£o: Calcule o produto de tr√™s n√∫meros inseridos pelo usu√°rio.
4.	Divis√£o e resto: Divida dois n√∫meros e exiba o resultado e o resto da divis√£o.
5.	Pot√™ncia: Calcule 2 ao quadrado usando o operador **.
---------
N√≠vel 2: Operadores de Compara√ß√£o
6.	Maior ou menor: Compare dois n√∫meros e diga qual √© maior ou se s√£o iguais.
7.	Igualdade vs. identidade: Verifique se dois valores s√£o iguais (==) e se s√£o id√™nticos (is).
8.	Verifica√ß√£o de faixa: Cheque se um n√∫mero est√° entre 10 e 20.
9.	Par ou √≠mpar: Use operadores para verificar se um n√∫mero √© par ou √≠mpar.
10.	Divisibilidade: Verifique se um n√∫mero √© divis√≠vel por outro usando %.
---------
N√≠vel 3: Operadores L√≥gicos
11.	AND: Verifique se uma pessoa tem idade entre 18 e 65 anos para trabalho.
12.	OR: Cheque se um n√∫mero √© negativo OU maior que 100.
13.	NOT: Inverta o resultado de uma condi√ß√£o (ex.: "n√£o √© fim de semana").
14.	Combina√ß√£o l√≥gica: Valide se um usu√°rio digitou um e-mail v√°lido (cont√©m "@" E ".").
15.	Tabela verdade: Teste as combina√ß√µes de True e False com and, or, not.
---------
N√≠vel 4: Operadores de Atribui√ß√£o
16.	Incremento: Use += para somar 5 a uma vari√°vel repetidamente em um loop.
17.	Decremento: Use -= para contar de 10 at√© 0.
18.	Atribui√ß√£o m√∫ltipla: Atribua valores a tr√™s vari√°veis em uma linha.
19.	Operadores com strings: Use += para concatenar palavras em uma frase.
20.	Modifica√ß√£o in-place: Multiplique um valor por 3 usando *= sem criar nova vari√°vel.
---------
N√≠vel 5: Operadores de Identidade e Associa√ß√£o
21.	is vs ==: Compare listas e n√∫meros para ver diferen√ßas entre identidade e igualdade.
22.	in com listas: Verifique se um elemento existe em uma lista.
23.	not in com strings: Cheque se uma letra n√£o est√° em uma palavra.
24.	Identidade de objetos: Teste se duas vari√°veis apontam para o mesmo objeto com is.
25.	Associa√ß√£o em dicion√°rios: Verifique se uma chave existe em um dicion√°rio usando in.
________________________________________
Como usar?
‚Ä¢	Cada exerc√≠cio pode ser expandido para incluir input do usu√°rio ou estruturas como if e loops.
‚Ä¢	Quer que eu detalhe a sola√ß√£o de algum espec√≠fico ou ajuste o foco (ex.: mais operadores l√≥gicos)?
√â √≥timo para praticar a l√≥gica fundamental do Python! üêç


